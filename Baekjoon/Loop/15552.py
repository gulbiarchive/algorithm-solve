import sys

T = int(sys.stdin.readline().rstrip())

for _ in range(T):
    A, B = map(int, sys.stdin.readline().rstrip().split())
    print(A + B)

'''
'input()' 함수는 사용자로부터 입력을 받는 내장 함수입니다. 
이 함수를 호출하면 프로그램이 사용자로부터 입력을 받을 때까지 대기하고, 
사용자가 입력을 마치고 엔터(Enter) 키를 누를 때까지의 문자열을 반환합니다.

반면에 'sys.stdin.readline()'은 'sys' 모듈에 있는 'stdin' 객체의 'readline()' 메서드를 사용하여 입력을 받습니다. 
이 방법은 보통 대량의 입력을 처리할 때 사용됩니다. 'readline()' 메서드는 한 줄씩 입력을 읽어들이며, 
'input()'과 달리 개행 문자('\n')를 포함한 문자열을 반환합니다. 

또한, 'sys.stdin.readline()'을 사용할 때는 'sys' 모듈을 import 해야 합니다.
대체로 대량의 입력이 있는 경우 'sys.stdin.readline()'을 사용하는 것이 더 효율적입니다. 
하지만 대부분의 경우에는 'input()'을 사용하는 것이 더 편리하고 간단합니다.


input 대신 sys.stdin.readline을 사용할 수 있다. 
단, 이때는 맨 끝의 개행문자까지 같이 입력받기 때문에 문자열을 저장하고 싶을 경우 .
rstrip()을 추가로 해 주는 것이 좋다.

'sys.stdin.readline()'을 사용할 때는 주로 문자열의 끝에 있는 개행 문자('\n')를 제거하기 
위해 'rstrip()' 메서드를 함께 사용합니다. 이는 입력된 문자열에서 개행 문자를 제거하여 문자열을 정제하기 위함입니다.

예를 들어, 사용자로부터 숫자를 입력받아 처리하는 경우를 생각해봅시다. 
사용자가 숫자를 입력하고 엔터(Enter) 키를 누르면, 입력된 문자열에는 숫자 뒤에 개행 문자('\n')가 포함됩니다. 
이 개행 문자는 숫자를 읽는 과정에서 문제를 일으킬 수 있습니다. 
따라서 'rstrip()'을 사용하여 문자열의 오른쪽 끝에 있는 공백 문자(개행 문자 포함)를 제거하여 이를 방지합니다.

예를 들어:
import sys
# 숫자 입력
number = sys.stdin.readline().rstrip()
# 입력된 숫자 출력
print("입력된 숫자:", number)

위의 예제에서 'rstrip()'을 사용하여 입력된 숫자의 양쪽 끝에 있는 
개행 문자('\n')를 제거하여 숫자를 정확하게 처리할 수 있습니다.
'''